# -*- coding: utf-8 -*-
"""ITCS4122_Project_Group35.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zCRRYhCzgVAsAtLlenoLjlzqoW998rT8
"""

import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.preprocessing import OrdinalEncoder
import numpy as np
import altair as alt
from sklearn.cluster import KMeans
import pandas as pd

st.title('The Regional Outlook on Business Optimization')
st.header('The Data')

#Loading the data
df=pd.read_csv('weather.csv')


#Taking a fraction of data (too big)
df = df.sample(frac=.1)

#Showing Dataframe
if st.sidebar.checkbox('Dataset'):
    st.write(df)
    
#Showing Dataframe after cleaning
if st.sidebar.checkbox('Dataset after cleaning'):
    df.drop(columns=['StartTime(UTC)', 'EndTime(UTC)', 'AirportCode', 'City', 'County', 'ZipCode'], axis=1, inplace=True)
    
    st.write(df)
    


"""# Regional Based Data Clustering based off weather types."""

df = df.sample(frac=.1)
df.shape
df.info()
df.isnull().sum()


plt.figure(figsize=(10,10))
sns.set_theme()
sns.countplot(data= df, x = 'Type')
plt.xlabel('Weather Type', fontweight= 'bold')
plt.xlabel('Count (*e6)', fontweight= 'bold')
plt.title('Total count of Weather Types')
plt.show()

ord_enc = OrdinalEncoder()
df["Types"] = ord_enc.fit_transform(df[["Type"]])
df[["Type", "Types"]].head(11)


ord_enc = OrdinalEncoder()
df["TMZone"] = ord_enc.fit_transform(df[["TimeZone"]])
df[["TimeZone", "TMZone"]].head(11)


df.head()

df1 = df[['Types','TMZone']].copy()


Tz_types = df[['TimeZone','Type']]

Tz_types.head()

#grouping occurances for each airport code 
types = pd.get_dummies(Tz_types['Type'])

types['TimeZone'] = Tz_types['TimeZone']

types = types.groupby('TimeZone').sum().reset_index()

types.head(8)

#Cluster 0 is most affected by rain
#Cluster 1 is most affected by fog
#Cluster 2 is most affecte by snow
#Cluster 3 is most affected by rain

codes= types[['TimeZone']]
types.drop('TimeZone', axis=1, inplace =True)

kmeans= KMeans(n_clusters=4, random_state=0).fit(types)

types['cluster'] = kmeans.labels_
types.head()
types.groupby('cluster').mean()

#Creating 
if st.sidebar.checkbox('Clustering by Weather Type'):
    
    st.write(codes)
    
    fig1= sns.catplot(data = types, x ='cluster', y='Cold', kind='bar')
    st.pyplot(fig1)

    fig2= sns.catplot(data = types, x ='cluster', y='Fog', kind='bar')
    st.pyplot(fig2)

    fig3= sns.catplot(data = types, x ='cluster', y='Rain', kind='bar')
    st.pyplot(fig3)

    fig4= sns.catplot(data = types, x ='cluster', y='Snow', kind='bar')
    st.pyplot(fig4)

    fig5= sns.catplot(data = types, x ='cluster', y='Storm', kind='bar')
    st.pyplot(fig5)
  
    


#Most common "types" of weather in the US/Mountain region timezone
if st.sidebar.checkbox('Visual Analysis of Data by Timezone'):
    
    indpie1 = df[df['TimeZone']=='US/Mountain']['Type'].value_counts()
    indpie1 = indpie1.plot(kind='bar',figsize=(10,8))
    plt.title('Most common "types" of weather in the US/Mountain region timezone')
    st.pyplot(indpie1.figure)
#Most common "types" of weather in the US/Pacific region timezone
    indpie2 = df[df['TimeZone']=='US/Pacific']['Type'].value_counts()
    indpie2 = indpie2.plot(kind='bar',figsize=(10,8))
    plt.title('Most common "types" of weather in the US/Pacific region timezone')
    st.pyplot(indpie2.figure)
##Most common "types" of weather in the US/Eastern region timezone
    indpie3 = df[df['TimeZone']=='US/Eastern']['Type'].value_counts()
    indpie3= indpie3.plot(kind='bar',figsize=(10,8))
    plt.title('Most common "types" of weather in the US/Eastern region timezone')
    st.pyplot(indpie3.figure)
#Most common "types" of weather in the US/Central region timezone
    indpie4 = df[df['TimeZone']=='US/Central']['Type'].value_counts()
    indpie4 = indpie4.plot(kind='bar',figsize=(10,8))
    plt.title('Most common "types" of weather in the US/Central region timezone')
    st.pyplot(indpie4.figure)

types = pd.get_dummies(Tz_types['Type'])

types['TimeZone'] = Tz_types['TimeZone']

types = types.groupby('TimeZone').sum().reset_index()

types.head()

codes= types[['TimeZone']]
types.drop('TimeZone', axis=1, inplace =True)